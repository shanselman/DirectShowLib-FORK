<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DirectShowLib.Utils</name>
    </assembly>
    <members>
        <member name="T:DirectShowLib.Utils.FilterGraphTools">
            <summary>
            A collection of methods to do common DirectShow tasks.
            </summary>
        </member>
        <member name="M:DirectShowLib.Utils.FilterGraphTools.AddFilterFromClsid(DirectShowLib.IGraphBuilder,System.Guid,System.String)">
            <summary>
            Add a filter to a DirectShow Graph using its CLSID
            </summary>
            <param name="graphBuilder">the IGraphBuilder interface of the graph</param>
            <param name="clsid">a valid CLSID. This object must implement IBaseFilter</param>
            <param name="name">the name used in the graph (may be null)</param>
            <returns>an instance of the filter if the method successfully created it, null if not</returns>
            <remarks>
            You can use <see cref="M:DirectShowLib.Utils.FilterGraphTools.IsThisComObjectInstalled(System.Guid)">IsThisComObjectInstalled</see> to check is the CLSID is valid before calling this method
            </remarks>
            <example>This sample shows how to programmatically add a NVIDIA Video decoder filter to a graph
            <code>
            Guid nvidiaVideoDecClsid = new Guid("71E4616A-DB5E-452B-8CA5-71D9CC7805E9");
            
            if (FilterGraphTools.IsThisComObjectInstalled(nvidiaVideoDecClsid))
            {
              filter = FilterGraphTools.AddFilterFromClsid(graphBuilder, nvidiaVideoDecClsid, "NVIDIA Video Decoder");
            }
            else
            {
              // use another filter...
            }
            </code>
            </example>
            <seealso cref="M:DirectShowLib.Utils.FilterGraphTools.IsThisComObjectInstalled(System.Guid)"/>
            <exception cref="T:System.ArgumentNullException">Thrown if graphBuilder is null</exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">Thrown if errors occur when the filter is add to the graph</exception>
        </member>
        <member name="M:DirectShowLib.Utils.FilterGraphTools.AddFilterByName(DirectShowLib.IGraphBuilder,System.Guid,System.String)">
            <summary>
            Add a filter to a DirectShow Graph using its name
            </summary>
            <param name="graphBuilder">the IGraphBuilder interface of the graph</param>
            <param name="deviceCategory">the filter category (see DirectShowLib.FilterCategory)</param>
            <param name="friendlyName">the filter name (case-sensitive)</param>
            <returns>an instance of the filter if the method successfully created it, null if not</returns>
            <example>This sample shows how to programmatically add a NVIDIA Video decoder filter to a graph
            <code>
            filter = FilterGraphTools.AddFilterByName(graphBuilder, FilterCategory.LegacyAmFilterCategory, "NVIDIA Video Decoder");
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException">Thrown if graphBuilder is null</exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">Thrown if errors occur when the filter is add to the graph</exception>
        </member>
        <member name="M:DirectShowLib.Utils.FilterGraphTools.AddFilterByDevicePath(DirectShowLib.IGraphBuilder,System.String,System.String)">
            <summary>
            Add a filter to a DirectShow Graph using its Moniker's device path
            </summary>
            <param name="graphBuilder">the IGraphBuilder interface of the graph</param>
            <param name="devicePath">a moniker path</param>
            <param name="name">the name to use for the filter in the graph</param>
            <returns>an instance of the filter if the method successfully creates it, null if not</returns>
            <example>This sample shows how to programmatically add a NVIDIA Video decoder filter to a graph
            <code>
            string devicePath = @"@device:sw:{083863F1-70DE-11D0-BD40-00A0C911CE86}\{71E4616A-DB5E-452B-8CA5-71D9CC7805E9}";
            filter = FilterGraphTools.AddFilterByDevicePath(graphBuilder, devicePath, "NVIDIA Video Decoder");
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException">Thrown if graphBuilder is null</exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">Thrown if errors occur when the filter is add to the graph</exception>
        </member>
        <member name="M:DirectShowLib.Utils.FilterGraphTools.FindFilterByName(DirectShowLib.IGraphBuilder,System.String)">
            <summary>
            Find a filter in a DirectShow Graph using its name
            </summary>
            <param name="graphBuilder">the IGraphBuilder interface of the graph</param>
            <param name="filterName">the filter name to find (case-sensitive)</param>
            <returns>an instance of the filter if found, null if not</returns>
            <seealso cref="M:DirectShowLib.Utils.FilterGraphTools.FindFilterByClsid(DirectShowLib.IGraphBuilder,System.Guid)"/>
            <exception cref="T:System.ArgumentNullException">Thrown if graphBuilder is null</exception>
        </member>
        <member name="M:DirectShowLib.Utils.FilterGraphTools.FindFilterByClsid(DirectShowLib.IGraphBuilder,System.Guid)">
            <summary>
            Find a filter in a DirectShow Graph using its CLSID
            </summary>
            <param name="graphBuilder">the IGraphBuilder interface of the graph</param>
            <param name="filterClsid">the CLSID to find</param>
            <returns>an instance of the filter if found, null if not</returns>
            <seealso cref="M:DirectShowLib.Utils.FilterGraphTools.FindFilterByName(DirectShowLib.IGraphBuilder,System.String)"/>
            <exception cref="T:System.ArgumentNullException">Thrown if graphBuilder is null</exception>
        </member>
        <member name="M:DirectShowLib.Utils.FilterGraphTools.RenderPin(DirectShowLib.IGraphBuilder,DirectShowLib.IBaseFilter,System.String)">
            <summary>
            Render a filter's pin in a DirectShow Graph
            </summary>
            <param name="graphBuilder">the IGraphBuilder interface of the graph</param>
            <param name="source">the filter containing the pin to render</param>
            <param name="pinName">the pin name</param>
            <returns>true if rendering is a success, false if not</returns>
            <example>
            <code>
            hr = graphBuilder.AddSourceFilter(@"foo.avi", "Source Filter", out filter);
            DsError.ThrowExceptionForHR(hr);
            
            if (!FilterGraphTools.RenderPin(graphBuilder, filter, "Output"))
            {
              // Something went wrong...
            }
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException">Thrown if graphBuilder or source is null</exception>
            <remarks>This method assumes that the filter is part of the given graph</remarks>
        </member>
        <member name="M:DirectShowLib.Utils.FilterGraphTools.DisconnectPins(DirectShowLib.IBaseFilter)">
            <summary>
            Disconnect all pins on a given filter
            </summary>
            <param name="filter">the filter on which to disconnect all the pins</param>
            <exception cref="T:System.ArgumentNullException">Thrown if filter is null</exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">Thrown if errors occured during the disconnection process</exception>
            <remarks>Both input and output pins are disconnected</remarks>
        </member>
        <member name="M:DirectShowLib.Utils.FilterGraphTools.DisconnectAllPins(DirectShowLib.IGraphBuilder)">
            <summary>
            Disconnect pins of all the filters in a DirectShow Graph
            </summary>
            <param name="graphBuilder">the IGraphBuilder interface of the graph</param>
            <exception cref="T:System.ArgumentNullException">Thrown if graphBuilder is null</exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">Thrown if the method can't enumerate its filters</exception>
            <remarks>This method doesn't throw an exception if an error occurs during pin disconnections</remarks>
        </member>
        <member name="M:DirectShowLib.Utils.FilterGraphTools.RemoveAllFilters(DirectShowLib.IGraphBuilder)">
            <summary>
            Remove and release all filters from a DirectShow Graph
            </summary>
            <param name="graphBuilder">the IGraphBuilder interface of the graph</param>
            <exception cref="T:System.ArgumentNullException">Thrown if graphBuilder is null</exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">Thrown if the method can't enumerate its filters</exception>
        </member>
        <member name="M:DirectShowLib.Utils.FilterGraphTools.SaveGraphFile(DirectShowLib.IGraphBuilder,System.String)">
            <summary>
            Save a DirectShow Graph to a GRF file
            </summary>
            <param name="graphBuilder">the IGraphBuilder interface of the graph</param>
            <param name="fileName">the file to be saved</param>
            <exception cref="T:System.ArgumentNullException">Thrown if graphBuilder is null</exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">Thrown if errors occur during the file creation</exception>
            <seealso cref="M:DirectShowLib.Utils.FilterGraphTools.LoadGraphFile(DirectShowLib.IGraphBuilder,System.String)"/>
            <remarks>This method overwrites any existing file</remarks>
        </member>
        <member name="M:DirectShowLib.Utils.FilterGraphTools.LoadGraphFile(DirectShowLib.IGraphBuilder,System.String)">
            <summary>
            Load a DirectShow Graph from a file
            </summary>
            <param name="graphBuilder">the IGraphBuilder interface of the graph</param>
            <param name="fileName">the file to be loaded</param>
            <exception cref="T:System.ArgumentNullException">Thrown if graphBuilder is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the given file is not a valid graph file</exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">Thrown if errors occur during loading</exception>
            <seealso cref="M:DirectShowLib.Utils.FilterGraphTools.SaveGraphFile(DirectShowLib.IGraphBuilder,System.String)"/>
        </member>
        <member name="M:DirectShowLib.Utils.FilterGraphTools.HasPropertyPages(DirectShowLib.IBaseFilter)">
            <summary>
            Check if a DirectShow filter can display Property Pages
            </summary>
            <param name="filter">A DirectShow Filter</param>
            <exception cref="T:System.ArgumentNullException">Thrown if filter is null</exception>
            <seealso cref="M:DirectShowLib.Utils.FilterGraphTools.ShowFilterPropertyPage(DirectShowLib.IBaseFilter,System.IntPtr)"/>
            <returns>true if the filter has Property Pages, false if not</returns>
            <remarks>
            This method is intended to be used with <see cref="M:DirectShowLib.Utils.FilterGraphTools.ShowFilterPropertyPage(DirectShowLib.IBaseFilter,System.IntPtr)">ShowFilterPropertyPage</see>
            </remarks>
        </member>
        <member name="M:DirectShowLib.Utils.FilterGraphTools.ShowFilterPropertyPage(DirectShowLib.IBaseFilter,System.IntPtr)">
            <summary>
            Display Property Pages of a given DirectShow filter
            </summary>
            <param name="filter">A DirectShow Filter</param>
            <param name="parent">A hwnd handle of a window to contain the pages</param>
            <exception cref="T:System.ArgumentNullException">Thrown if filter is null</exception>
            <seealso cref="M:DirectShowLib.Utils.FilterGraphTools.HasPropertyPages(DirectShowLib.IBaseFilter)"/>
            <remarks>
            You can check if a filter supports Property Pages with the <see cref="M:DirectShowLib.Utils.FilterGraphTools.HasPropertyPages(DirectShowLib.IBaseFilter)">HasPropertyPages</see> method.<br/>
            <strong>Warning</strong> : This method is blocking. It only returns when the Property Pages are closed.
            </remarks>
            <example>This sample shows how to check if a filter supports Property Pages and displays them
            <code>
            if (FilterGraphTools.HasPropertyPages(myFilter))
            {
              FilterGraphTools.ShowFilterPropertyPage(myFilter, myForm.Handle);
            }
            </code>
            </example>
        </member>
        <member name="M:DirectShowLib.Utils.FilterGraphTools.IsThisComObjectInstalled(System.Guid)">
            <summary>
            Check if a COM Object is available
            </summary>
            <param name="clsid">The CLSID of this object</param>
            <example>This sample shows how to check if the MPEG-2 Demultiplexer filter is available
            <code>
            if (FilterGraphTools.IsThisComObjectInstalled(typeof(MPEG2Demultiplexer).GUID))
            {
              // Use it...
            }
            </code>
            </example>
            <returns>true if the object is available, false if not</returns>
        </member>
        <member name="M:DirectShowLib.Utils.FilterGraphTools.IsVMR9Present">
            <summary>
            Check if the Video Mixing Renderer 9 Filter is available
            <seealso cref="M:DirectShowLib.Utils.FilterGraphTools.IsThisComObjectInstalled(System.Guid)"/>
            </summary>
            <remarks>
            This method uses <see cref="M:DirectShowLib.Utils.FilterGraphTools.IsThisComObjectInstalled(System.Guid)">IsThisComObjectInstalled</see> internally
            </remarks>
            <returns>true if VMR9 is present, false if not</returns>
        </member>
        <member name="M:DirectShowLib.Utils.FilterGraphTools.IsVMR7Present">
            <summary>
            Check if the Video Mixing Renderer 7 Filter is available
            <seealso cref="M:DirectShowLib.Utils.FilterGraphTools.IsThisComObjectInstalled(System.Guid)"/>
            </summary>
            <remarks>
            This method uses <see cref="M:DirectShowLib.Utils.FilterGraphTools.IsThisComObjectInstalled(System.Guid)">IsThisComObjectInstalled</see> internally
            </remarks>
            <returns>true if VMR7 is present, false if not</returns>
        </member>
        <member name="M:DirectShowLib.Utils.FilterGraphTools.ConnectFilters(DirectShowLib.IGraphBuilder,DirectShowLib.IBaseFilter,System.String,DirectShowLib.IBaseFilter,System.String,System.Boolean)">
            <summary>
            Connect pins from two filters
            </summary>
            <param name="graphBuilder">the IGraphBuilder interface of the graph</param>
            <param name="upFilter">the upstream filter</param>
            <param name="sourcePinName">the upstream filter pin name</param>
            <param name="downFilter">the downstream filter</param>
            <param name="destPinName">the downstream filter pin name</param>
            <param name="useIntelligentConnect">indicate if the method should use DirectShow's Intelligent Connect</param>
            <exception cref="T:System.ArgumentNullException">Thrown if graphBuilder, upFilter or downFilter are null</exception>
            <exception cref="T:System.ArgumentException">Thrown if pin names are not found in filters</exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">Thrown if pins can't connect</exception>
            <remarks>
            If useIntelligentConnect is true, this method can add missing filters between the two pins.<br/>
            If useIntelligentConnect is false, this method works only if the two media types are compatible.
            </remarks>
        </member>
        <member name="M:DirectShowLib.Utils.FilterGraphTools.ConnectFilters(DirectShowLib.IGraphBuilder,DirectShowLib.IPin,DirectShowLib.IPin,System.Boolean)">
            <summary>
            Connect pins from two filters
            </summary>
            <param name="graphBuilder">the IGraphBuilder interface of the graph</param>
            <param name="sourcePin">the source (upstream / output) pin</param>
            <param name="destPin">the destination (downstream / input) pin</param>
            <param name="useIntelligentConnect">indicates if the method should use DirectShow's Intelligent Connect</param>
            <exception cref="T:System.ArgumentNullException">Thrown if graphBuilder, sourcePin or destPin are null</exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">Thrown if pins can't connect</exception>
            <remarks>
            If useIntelligentConnect is true, this method can add missing filters between the two pins.<br/>
            If useIntelligentConnect is false, this method works only if the two media types are compatible.
            </remarks>
        </member>
    </members>
</doc>
